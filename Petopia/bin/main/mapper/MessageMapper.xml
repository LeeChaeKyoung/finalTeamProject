<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.campus.myapp.dao.MessageDAO">
<select id="message_list" parameterType="com.campus.myapp.vo.MessageVO" resultType="com.campus.myapp.vo.MessageVO">
    select no, room, send_nick, recv_nick, date_format(send_time, '%Y-%m-%d %H:%i') send_time, read_time, content, read_chk
    from message
    where no in (select max(no) from message group by room) and (send_nick = #{username} or recv_nick=#{username})
    order by no desc;
</select>

<!-- 메세지 list에서 상대방 profile 가져오기 -->
<select id="get_other_profile" parameterType="com.campus.myapp.vo.MessageVO" resultType="String">
    select profileimage from member
    <choose>
        <when test="send_nick == username">
            where username = #{recv_nick}
        </when>
        <otherwise>
            where username = #{send_nick}
        </otherwise>
    </choose>
</select>

<!-- 안읽은 메세지 갯수 가져오기 -->
<select id="count_unread" parameterType="com.campus.myapp.vo.MessageVO" resultType="Int">
    select count(no) from message 
    where recv_nick=#{username} and read_chk=0 and room=#{room}
</select>

<!-- 메세지 내용 가져오기 -->
<select id="room_content_list" parameterType="com.campus.myapp.vo.MessageVO" resultType="com.campus.myapp.vo.MessageVO">
    select m.no, m.room, m.send_nick, m.recv_nick, date_format(m.send_time, '%Y-%m-%d %H:%i') send_time, m.read_time, m.content, m.read_chk, u.profileimage
    from message m left outer join member u
    on m.send_nick = u.username
    <choose>
        <when test="room != 0">
            where room=#{room}
        </when>
        <otherwise>
            where (recv_nick = #{recv_nick} and send_nick = #{username} (send_nick = #{recv_nick} and recv_nick = #{username})
        </otherwise>
    </choose>

</select>

<!-- 메세지 읽음 처리 -->
<update id="message_read_chk" parameterType="com.campus.myapp.vo.MessageVO">
    update message set read_chk=1
    <choose>
        <when test="room != 0">
            where room=#{room} and read_chk=0 and recv_nick=#{username}
        </when>
        <otherwise>
            where send_nick=#{recv_nick} and read_chk=0 and recv_nick=#{username}
        </otherwise>
    </choose>

</update>

<!-- 메세지리스트에서 메세지 보내기 -->
<insert id="messageSendInlist" parameterType="com.campus.myapp.vo.MessageVO">
    <choose>
        <when test="room != 0">
            insert into message(no,room,send_nick,recv_nick,send_time,read_time,content,read_chk) values(0, #{room}, #{send_nick}, #{recv_nick}, now(), now(), #{content}, 0);
        </when>
        <otherwise>
            insert into message(no,room,send_nick,recv_nick,send_time,read_time,content,read_chk) values(0, #{room}, #{send_nick}, #{recv_nick}, now(), now(), #{content}, 0);
        </otherwise>
    </choose>
</insert>

<!-- room 번호 최댓값 구하기 -->
<select id="max_room"  parameterType="com.campus.myapp.vo.MessageVO" resultType="Int">
    select max(room) from message
</select>

<!-- 메세지 이력이 있는지 검색 -->
<select id="exist_chat" parameterType="com.campus.myapp.vo.MessageVO" resultType="Int">
    select count(no) from message 
    where (recv_nick = #{recv_nick} and send_nick=#{send_nick}) or (send_nick = #{recv_nick} and recv_nick=#{send_nick})
</select>

<!-- 기존 메세지 내역의 room 번호를 가져옴 -->
<select id="select_room"  parameterType="com.campus.myapp.vo.MessageVO" resultType="String">
    select room from message
    where (recv_nick = #{recv_nick} and send_nick=#{send_nick}) or (send_nick = #{recv_nick} and recv_nick=#{send_nick})
    limit 0,1
</select>
</mapper>